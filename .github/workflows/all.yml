name: Compile, Test, and Deploy
on:
  pull_request: {}
  push:
    branches:
      - main
  release:
    types: [published]
jobs:

  build-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - { python-version: "3.7", cibwbuild: "cp37-manylinux_x86_64"}
        - { python-version: "3.8", cibwbuild: "cp38-manylinux_x86_64"}
        - { python-version: "3.9", cibwbuild: "cp39-manylinux_x86_64"}
        - { python-version: "3.10", cibwbuild: "cp310-manylinux_x86_64"}
        - { python-version: "3.7", cibwbuild: "cp37-manylinux_aarch64"}
        - { python-version: "3.8", cibwbuild: "cp38-manylinux_aarch64"}
        - { python-version: "3.9", cibwbuild: "cp39-manylinux_aarch64"}
        - { python-version: "3.10", cibwbuild: "cp310-manylinux_aarch64"}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Set up QEMU for aarch64 on Linux
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel pytest

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.4.0
      env:
        CIBW_PLATFORM: linux
        CIBW_BUILD: ${{ matrix.cibwbuild }}
        CIBW_BUILD_VERBOSITY: 3
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
          ip install auditwheel-symbols && (auditwheel repair -w {dest_dir} {wheel} || auditwheel-symbols --manylinux 2014 {wheel})
        CIBW_TEST_REQUIRES: -r test-requirements.txt
        CIBW_TEST_COMMAND: "cd {project}/tests && python -m pytest -v ."
        CIBW_ARCHS: auto64
        CIBW_ARCHS_LINUX: "auto aarch64"  # On an Linux Intel runner with qemu installed, build Intel and ARM wheels

    - uses: actions/upload-artifact@v2
      with:
        name: my-wheel-artifact
        path: ./wheelhouse/*.whl

  build-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - { os: windows-latest, python-version: "3.7", CIBW-BUILD: "cp37*"}
        - { os: windows-latest, python-version: "3.8", CIBW-BUILD: "cp38*"}
        - { os: windows-latest, python-version: "3.9", CIBW-BUILD: "cp39*"}
        - { os: windows-latest, python-version: "3.10", CIBW-BUILD: "cp310*"}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel pytest

    - name: Build Wheels
      uses: pypa/cibuildwheel@v2.3.1
      env:
        CIBW_BUILD_VERBOSITY: 1
        CIBW_TEST_REQUIRES: -r test-requirements.txt
        CIBW_TEST_COMMAND: "cd /D {project}\\tests && python -m pytest -v ."
        CIBW_ARCHS: auto64
        CIBW_BUILD: ${{matrix.CIBW-BUILD}}

    - uses: actions/upload-artifact@v2
      with:
        name: my-wheel-artifact
        path: ./wheelhouse/*.whl

  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - { os: macos-latest, build: cp37-macosx_x86_64, archs-macos: "x86_64", python-version: "3.7"}
        - { os: macos-latest, build: cp38-macosx_universal2, archs-macos: "universal2", python-version: "3.8", }
        - { os: macos-latest, build: cp39-macosx_universal2, archs-macos: "universal2", python-version: "3.9",}
        - { os: macos-latest, build: cp310-macosx_universal2, archs-macos: "universal2", python-version: "3.10", }

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build wheels ${{ matrix.python-version }}
      uses: pypa/cibuildwheel@v2.3.1
      env:
        MACOSX_DEPLOYMENT_TARGET: 10.15
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BEFORE_BUILD: python -m pip install --upgrade pip && pip install setuptools wheel pytest
        CIBW_TEST_REQUIRES: -r test-requirements.txt
        CIBW_TEST_COMMAND: "cd {project}/tests; python -m pytest -v ."
        CIBW_BUILD: ${{matrix.build}}
        CIBW_ARCHS: auto64
        CIBW_ARCHS_MACOS: ${{matrix.archs-macos}}
        # todo: want to test Python 3.10
        CIBW_TEST_SKIP: "*310*"

    - uses: actions/upload-artifact@v2
      with:
        name: my-wheel-artifact
        path: ./wheelhouse/*.whl

  upload-pypi:
    needs: [build-windows, build-ubuntu, build-macos]
    runs-on: ubuntu-latest
    name: "Upload wheels to PyPI"
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: my-wheel-artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}